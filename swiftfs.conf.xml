<log>
    <!-- use syslog for error messages -->
    <use_syslog type="boolean">True</use_syslog>
</log>

<pool>
    <!-- number of concurrent connections for each type of operation -->
    <writers type="int">5</writers>
    <readers type="int">4</readers>
    <!-- number of concurrent connections other operations,
    such as directory listing, object deleting, etc -->
    <operations type="int">4</operations>
    <!-- max requests in pool queue -->
    <max_requests_per_pool type="uint">100</max_requests_per_pool>
</pool>

<connection>
    <!-- timeout value for HTTP requests (seconds) -->
    <timeout type="int">600</timeout>
    <!-- number of retries, before giving up (-1 for infinite loop) -->
    <retries type="int">600</retries>
    <!--set True to enable server certificate and hostname validation -->
    <ssl_enable_validation type="boolean">True</ssl_enable_validation>
    <!--the list of available 'High' cipher suites minus Anonymous DH and Camellia -->
    <ssl_chipher_list type="string">RC4-SHA:HIGH:!ADH:!AECDH:!CAMELLIA</ssl_chipher_list>
    <!-- Path to to a file of CA certificates in PEM format. The file can contain several CA certificates identified by
        -----BEGIN CERTIFICATE-----
        ... (CA certificate in base64 encoding) ...
        -----END CERTIFICATE-----
       sequences. Before, between, and after the certificates text is allowed which can be used e.g. for descriptions of the certificates.
    -->
    <ssl_ca_cert type="string">crt/trust.pem</ssl_ca_cert>
    <!-- the server's identity in the server's certificate -->
    <ssl_hostname type="string">your.swift.cloud.com</ssl_hostname>
</connection>

<auth>
    <!-- time in seconds before AuthToken expires (24h - 10min) -->
    <ttl type="uint">85800</ttl>
</auth>

<encryption>
    <!-- set True if enable encryption/decryption subsystem -->
    <enabled type="boolean">False</enabled>
    <!-- path to key file -->
    <key_file type="string">test.key</key_file>
</encryption>

<filesystem>
    <!-- time to keep directory cache (seconds), 5 sec -->
    <dir_cache_max_time type="uint">5</dir_cache_max_time>
    <!-- set True to enable objects caching -->
    <cache_enabled type="boolean">True</cache_enabled>
    <!-- set True to enable calculating MD5 sum of file content, increases CPU load -->
    <md5_enabled type="boolean">True</md5_enabled>
    <!-- directory for storing cache objects -->
    <cache_dir type="string">/tmp/swiftfs</cache_dir>
    <!-- maximum size of cache directory -->
    <cache_dir_max_size type="string">1Gb</cache_dir_max_size>
    <!-- maximum time of cached object, 10 min -->
    <cache_object_ttl type="uint">600</cache_object_ttl>
    <!-- how often check cached objects for expiration, 1 min -->
    <cache_check_secs type="uint">60</cache_check_secs>
    <!-- the max number of parallel downloads streams per file, must me <= number of "pool.writers" -->
    <parallel_downloads type="uint">3</parallel_downloads>
    <!-- the max number of readahead streams per file, must me <= number of "pool.reads" -->
    <readahead_uploads type="uint">3</readahead_uploads>
    <!-- segment size for upload / download files (5mb)
    <segment_size type="uint">1024</segment_size> -->
    <!-- segment size for upload / download files (10mb)  -->
    <segment_size type="uint">10485760</segment_size>
</filesystem>

<statistics>
    <!-- set True if enable statistics HTTP interface -->
    <enabled type="boolean">True</enabled>
    <!-- HTTP port -->
    <port type="int">8011</port>
    <!-- Maximum items to keep in history -->
    <history_max_items type="uint">2000</history_max_items>
</statistics>
